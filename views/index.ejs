<%- include("partials/header-nav")%>
<script>
    console.log('Stylesheet:', document.querySelector('link[rel="stylesheet"]').href);
</script>
<!-- JS CALENDAR SCRIPT -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
<script>
    function changeWarehouse() {
      const selectedWarehouse = document.getElementById('location').value;
      window.location.href = `/home?warehouseId=${selectedWarehouse}`;
    }
  </script>
  <script src="https://cdn.jsdelivr.net/npm/vega@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-lite@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-embed@6"></script>   
<section class="menu">
  <h1><%= stats.location %></h1>
  <section class="dropdowns">
    <select name="location" id="location" onchange="changeWarehouse()" <% if (user.role === 'TeamLeader') { %> style="display: none;" <% } %>>
      <% for (let w of warehouses) { %>
        <option value="<%= w.warehouse_id %>" <%= warehouseId == w.warehouse_id ? 'selected' : '' %> >
          <%= w.location %>
        </option>
      <% } %>
            <!--<option value="New York">New York</option>
            <option value="Los Angeles">Los Angeles</option>-->
        </select>
        <input type="text" id="date_range" placeholder="Selecteer Datumbereik" />
        <button id="filter" onclick="filterData()">Filter</button>
        <script>
            flatpickr("#date_range", {
                mode: "range",
                dateFormat: "d-m-Y", // Set European date format
                locale: {
                    firstDayOfWeek: 1 // Start the week on Monday
                }
            });
    // Filter data based on date range
    function filterData() {
        const selectedWarehouse = document.getElementById('location').value;
        const dateRange = document.getElementById('date_range').value;

        if (!dateRange) {
            alert("Selecteer een datumbereik!");
            return;
        }

         const dates = dateRange.split(" to ");
         const startDate = dates[0];
         const endDate = dates[1] || startDate;

         window.location.href = `/home?warehouseId=${selectedWarehouse}&startDate=${startDate}&endDate=${endDate}`;
    }
        </script>
    </section>
</section>
<h1><%= startDate %> tot en met <%= endDate %></h1>
<article>
    <h2>Overview</h2>
<section class="firstrow">
    <div class="statcard">
        <i></i>
        <h2><%= stats.totalOrders %></h2>
        <p>Orders Verwerkt</p>
    </div>
    <div class="statcard">
        <i></i>
        <h2><%= stats.delayedOrders %></h2>
        <p>Orders Vertraagd</p>
    </div>
    <div class="statcard">
        <i></i>
        <h2><%= stats.onTimePercentage %>%</h2>
        <p>Orderverwerkingspercentage</p>
    </div>
    <div class="statcard">
        <i></i>
        <h2><%= stats.warehouseUtilization %>%</h2>
        <p>Ruimtegebruik</p>
    </div>
</section>
</article>
<article>
    <h2>Voorraad Omzet</h2>
    <section class="secondrow">
      <div class="placeholder" id="voorraadOmzet"></div>
      <button id="resetButton">Reset Grafiek</button>
      <script type="text/javascript">
        // Dynamische data van de server
        const graphData = <%- JSON.stringify(graphData) %>;
      
        // Specificeer een lege array om producten die verborgen moeten worden bij te houden
        let excludedProducts = [];
      
        // Functie om de grafiek te updaten
        function renderChart() {
          // Filter de data door de producten die uitgeschakeld zijn te verwijderen
          const filteredData = graphData.filter(d => !excludedProducts.includes(d.product));
      
          // Sorteer de data zodat de kleinste waarde altijd voor de grotere waarde komt
          const sortedData = filteredData.sort((a, b) => {
            if (a.product === b.product) {
              // Als dezelfde productsoort, sorteer op de waarde
              return a.value - b.value;  // Kleinere waarde eerst
            }
            return 0;
          });
      
          const vegaSpec = {
            "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
            "width": "container",  // Pas de breedte aan
            "height": 400, // Pas de hoogte aan
            "data": {
              "values": sortedData
            },
            "mark": {
              "type": "bar",
              "cursor": "pointer"  // Verander de cursor bij hover
            },
            "encoding": {
              "x": {
                "field": "product",  // X-as is gebaseerd op het product
                "type": "nominal",
                "axis": { 
                  "title": "Producten",  // X-as titel
                  "titleFontSize": 16,  // Vergroot de grootte van de titel
                  "titleFontWeight": "bold",  // Zet de titel vetgedrukt
                  "titlePadding": 10,  // Vergroot de witruimte tussen titel en grafiek
                  "labelAngle": 45  // Rotatie van de x-as labels
                }
              },
              "y": {
                "field": "value",  // Y-as is gebaseerd op de waarde
                "type": "quantitative",
                "title": "Waarde in euro ‚Ç¨",  // Y-as titel
                "titleFontSize": 16,  // Vergroot de grootte van de titel
                "titleFontWeight": "bold",  // Zet de titel vetgedrukt
                "titlePadding": 20  // Vergroot de witruimte tussen titel en grafiek
              },
              "color": {
                "field": "type",  // Kleur op basis van het type (Voorraadwaarde of Verkochte Waarde)
                "type": "nominal",
                "scale": {
                  "domain": ["Voorraadwaarde", "Verkochte Waarde"],
                  "range": ["#0469C8", "#3de0c6"]  // Blauwe en groene kleuren
                },
                "title": "Type"
              },
              "order": {
                "field": "value",  // Sorteer de bars op de waarde
                "type": "quantitative",
                "sort": "ascending"  // Kleinere waarde eerst
              },
              "tooltip": [
                { "field": "product", "type": "nominal", "title": "Product" },
                { "field": "type", "type": "nominal", "title": "Type" },
                { "field": "value", "type": "quantitative", "title": "Waarde in ‚Ç¨" }
              ]
            },
            "config": {
              "view": {
                "stroke": null
              },
              "legend": {
                "orient": "right",  // Verplaats de legenda naar de rechterkant
                "title": "Type",
                "symbolSize": 150,
                "labelFontSize": 12,
                "labelPadding": 10
              }
            }
          };
      
          // Render de grafiek
          vegaEmbed('#voorraadOmzet', vegaSpec).then(result => {
            // Voeg een kliklistener toe aan elke staaf
            result.view.addEventListener('click', (event, item) => {
              if (item && item.datum) {
                const clickedProduct = item.datum.product;
      
                // Toggle het product in de excludedProducts array
                if (excludedProducts.includes(clickedProduct)) {
                  excludedProducts = excludedProducts.filter(p => p !== clickedProduct);
                } else {
                  excludedProducts.push(clickedProduct);
                }
      
                // Update de grafiek na interactie
                renderChart();
              }
            });
          });
        }
      
        // Eerste rendering van de grafiek
        renderChart();
      
        // Voeg een reset-knop toe
        document.getElementById('resetButton').addEventListener('click', () => {
          excludedProducts = [];  // Maak de excludedProducts-array leeg
          renderChart();          // Herteken de grafiek
        });
      </script>
        <div class="statcard">
          <i></i>
          <h2><%= stats.turnoverRate %></h2>
          <p>Turnover rate</p>
          <h2 class="dynamic-word <%= stats.turnoverRate < 10 ? 'high' : (stats.turnoverRate >= 10 && stats.turnoverRate <= 15 ? 'medium' : 'low') %>">
              <%= stats.turnoverRate < 10 ? 'GOED' : (stats.turnoverRate >= 10 && stats.turnoverRate <= 15 ? 'MATIG' : 'SLECHT') %>
          </h2>
      </div>
    </section>
</article>
<article>
    <h2>Best sellers</h2>

    
    <section class="thirdrow">
      <div id="grid-js-table-products"></div>
    </section>
</article>

<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
<script>
  const products = <%- JSON.stringify(productSalesData) %>;

  // Format data for Grid.js
  const gridData = products.map(product => [
    `<a href="${product.link}" target="_blank"><img src="${product.image}" alt="Product Image" width="50" /></a>`,
    product.id,
    `<a href="${product.link}" target="_blank">${product.title}</a>`,  
    product.totalUnitsSold,
    product.totalRevenue,
    `<span class="${product.currentStockLevel} stock-niveau">${product.currentStockLevel} (${product.currentStock})</span>`
  ]);

  // Initialize Grid.js
  new gridjs.Grid({
    columns: [
      {
        name: "Afbeelding",
        formatter: (cell) => gridjs.html(cell)
      },
      "Product ID",
      {
        name: "Naam",
        formatter: (cell) => gridjs.html(cell)
      },
      {
        name: "Verkochte eenheden",
        width: "100px"
      },
      "Totale Omzet",
      {
        name: "Stock Niveau",
        formatter: (cell) => gridjs.html(cell)
      }
    ],
    data: gridData,
    pagination: {
      enabled: true,
      limit: 10
    },
    sort: true,
    search: true,
    resizable: true,
    width: '80%',
    style: {
      th: {
        'background-color': '#0469C8',
        'color': '#FFF'
      }
    },
    language: {
      'search': {
        'placeholder': 'üîç Zoeken...'
      },
      'pagination': {
        'previous': 'Vorige',
        'next': 'Volgende',
        'showing': 'Afbeelden: ',
        'results': () => 'resultaten',
        'of': 'van',
        'to': 'tot',
      }
    },
    className: {
      table: 'grid-js-table'
    }
      }).render(document.getElementById("grid-js-table-products"));
</script>

<%- include("partials/doc-end")%>
</script>
<!-- CHART SCRIPTS  -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/js/dashboard-charts.js"></script>
