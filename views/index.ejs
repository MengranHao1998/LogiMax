<%- include("partials/header-nav")%>
<script>
    console.log('Stylesheet:', document.querySelector('link[rel="stylesheet"]').href);
</script>
<!-- JS CALENDAR SCRIPT -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
<script>
    function changeWarehouse() {
      const selectedWarehouse = document.getElementById('location').value;
      window.location.href = `/home?warehouseId=${selectedWarehouse}`;
    }
  </script>
  <script src="https://cdn.jsdelivr.net/npm/vega@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-lite@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-embed@6"></script>
  <script>
async function fetchAndRenderVoorraadOmzetChart(warehouseId) {
  try {
    const response = await fetch(`/api/products-stock-value?warehouseId=${warehouseId}`);
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const data = await response.json();
    console.log(`Fetched data for warehouse ${warehouseId}:`, data);

    if (!data.length) {
      console.error("No data available for chart.");
      return;
    }

    vegaEmbed("#voorraadOmzet", {
      "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
      "description": `Voorraad Omzet Chart for Warehouse ${warehouseId}`,
      "data": { "values": data },
      "mark": "bar",
      "encoding": {
        "x": { "field": "title", "type": "ordinal", "axis": { "title": "Product Name", "labelAngle": -45 } },
        "y": { "field": "quantity", "type": "quantitative", "axis": { "title": "Quantity" } },
        "color": { "field": "title", "type": "nominal", "legend": { "title": "Product" } }
      }
    });
  } catch (error) {
    console.error("Error fetching voorraad omzet data:", error);
  }
}

function changeWarehouse() {
  const warehouseId = document.getElementById('location').value;
  fetchAndRenderVoorraadOmzetChart(warehouseId);
}

fetchAndRenderVoorraadOmzetChart(0);
  </script>
<section class="menu">
  <h1><%= stats.location %></h1>
  <section class="dropdowns">
    <select name="location" id="location" onchange="changeWarehouse()" <% if (user.role === 'TeamLeader') { %> style="display: none;" <% } %>>
      <% for (let w of warehouses) { %>
        <option value="<%= w.warehouse_id %>" <%= warehouseId == w.warehouse_id ? 'selected' : '' %> >
          <%= w.location %>
        </option>
      <% } %>
            <!--<option value="New York">New York</option>
            <option value="Los Angeles">Los Angeles</option>-->
        </select>
        <input type="text" id="date_range" placeholder="Selecteer Datumbereik" />
        <button onclick="filterData()">Filter</button>
        <script>
            flatpickr("#date_range", {
                mode: "range",
                dateFormat: "d-m-Y", // Set European date format
                locale: {
                    firstDayOfWeek: 1 // Start the week on Monday
                }
            });
    // Filter data based on date range
    function filterData() {
        const selectedWarehouse = document.getElementById('location').value;
        const dateRange = document.getElementById('date_range').value;

        if (!dateRange) {
            alert("Selecteer een datumbereik!");
            return;
        }

         const dates = dateRange.split(" to ");
         const startDate = dates[0];
         const endDate = dates[1] || startDate;

         window.location.href = `/home?warehouseId=${selectedWarehouse}&startDate=${startDate}&endDate=${endDate}`;
    }
        </script>
    </section>
</section>
<h1><%= startDate %> tot en met <%= endDate %></h1>
<article>
    <h2>Overview</h2>
<section class="firstrow">
    <div class="statcard">
        <i></i>
        <h2><%= stats.totalOrders %></h2>
        <p>Orders Verwerkt</p>
    </div>
    <div class="statcard">
        <i></i>
        <h2><%= stats.delayedOrders %></h2>
        <p>Orders Vertraagd</p>
    </div>
    <div class="statcard">
        <i></i>
        <h2><%= stats.onTimePercentage %>%</h2>
        <p>Orderverwerkingspercentage</p>
    </div>
    <div class="statcard">
        <i></i>
        <h2><%= stats.spaceUtilization %>%</h2>
        <p>Ruimtegebruik</p>
    </div>
</section>
</article>
<article>
    <h2>Voorraad Omzet</h2>
    <section class="secondrow">
        <div class="placeholder" id="voorraadOmzet"></div>
        <div class="statcard">
            <i></i>
            <h2><%= stats.turnoverRate %></h2>
            <p>Turnover rate</p>
        </div>
    </section>
</article>

<article>
    <h2>Meest Verkocht</h2>
    <section class="thirdrow">
      
      <div id="grid-js-table"></div>

        <div class="placeholder">
            <table id="product-table" border="1">
                <thead>
                    <tr>
                        <th>Product Image</th>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Units Sold</th>
                        <th>Total Revenue</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically added here -->
                    <% for (let i = 0; i < 10; i++) { %>
                        <tr>
                            <td><img src="<%= productSalesData[i].image %>" alt="<%= productSalesData[i].title %>" width="100px"></td>
                            <td><%= productSalesData[i].id %></td>
                            <td><a href="<%= productSalesData[i].link %>"><%= productSalesData[i].title %></a></td>
                            <td><%= productSalesData[i].totalUnitsSold %></td>
                            <td><%= productSalesData[i].currency %> <%= productSalesData[i].totalRevenue %></td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
        </div>
        <div class="statcard">
            <p>Stock Level</p>
            <i></i>
            <h2 class="<%= productSalesData[0].totalUnitsSold > 30 ? 'low' : (productSalesData[0].totalUnitsSold >= 15 && productSalesData[0].totalUnitsSold <= 30 ? 'medium' : 'high') %>">
                <%= productSalesData[0].totalUnitsSold > 30 ? 'LOW' : (productSalesData[0].totalUnitsSold >= 15 && productSalesData[0].totalUnitsSold <= 30 ? 'MEDIUM' : 'HIGH') %>
            </h2>
            <p><%= productSalesData[0].title %></p>
        </div>
    </section>
</article>

<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
<script>
  const products = <%- JSON.stringify(productSalesData) %>;

// Format data for Grid.js
const gridData = products.map(product => [
  `<img src="${product.image}" alt="Product Image" width="50" />`,
  product.id,
  `<a href="${product.link}" target="_blank">${product.title}</a>`,  
  product.totalUnitsSold,
  product.totalRevenue
]);

// Initialize Grid.js
new gridjs.Grid({
  columns: [
    {
      name: "Product Image",
      formatter: (cell) => gridjs.html(cell)
    },
    "Product ID",
    {
      name: "Product Name",
      formatter: (cell) => gridjs.html(cell)
    },
    "Units Sold",
    "Total Revenue"
  ],
  data: gridData,
  pagination: {
    enabled: true,
    limit: 5
  },
  sort: true,
  search: true
    }).render(document.getElementById("grid-js-table"));
</script>

<%- include("partials/doc-end")%>
<!-- CHART SCRIPTS  -->

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/public/js/dashboard-charts.js"></script>
